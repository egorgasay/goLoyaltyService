// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRealStorage is a mock of IRealStorage interface.
type MockIRealStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIRealStorageMockRecorder
}

// MockIRealStorageMockRecorder is the mock recorder for MockIRealStorage.
type MockIRealStorageMockRecorder struct {
	mock *MockIRealStorage
}

// NewMockIRealStorage creates a new mock instance.
func NewMockIRealStorage(ctrl *gomock.Controller) *MockIRealStorage {
	mock := &MockIRealStorage{ctrl: ctrl}
	mock.recorder = &MockIRealStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRealStorage) EXPECT() *MockIRealStorageMockRecorder {
	return m.recorder
}

// CheckID mocks base method.
func (m *MockIRealStorage) CheckID(username, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckID", username, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckID indicates an expected call of CheckID.
func (mr *MockIRealStorageMockRecorder) CheckID(username, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckID", reflect.TypeOf((*MockIRealStorage)(nil).CheckID), username, id)
}

// CheckPassword mocks base method.
func (m *MockIRealStorage) CheckPassword(login, passwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", login, passwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockIRealStorageMockRecorder) CheckPassword(login, passwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockIRealStorage)(nil).CheckPassword), login, passwd)
}

// CreateUser mocks base method.
func (m *MockIRealStorage) CreateUser(login, passwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, passwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIRealStorageMockRecorder) CreateUser(login, passwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIRealStorage)(nil).CreateUser), login, passwd)
}
