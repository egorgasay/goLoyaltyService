// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUseCase is a mock of IUseCase interface.
type MockIUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUseCaseMockRecorder
}

// MockIUseCaseMockRecorder is the mock recorder for MockIUseCase.
type MockIUseCaseMockRecorder struct {
	mock *MockIUseCase
}

// NewMockIUseCase creates a new mock instance.
func NewMockIUseCase(ctrl *gomock.Controller) *MockIUseCase {
	mock := &MockIUseCase{ctrl: ctrl}
	mock.recorder = &MockIUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUseCase) EXPECT() *MockIUseCaseMockRecorder {
	return m.recorder
}

// CheckID mocks base method.
func (m *MockIUseCase) CheckID(host, cookie, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckID", host, cookie, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckID indicates an expected call of CheckID.
func (mr *MockIUseCaseMockRecorder) CheckID(host, cookie, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckID", reflect.TypeOf((*MockIUseCase)(nil).CheckID), host, cookie, id)
}

// CheckPassword mocks base method.
func (m *MockIUseCase) CheckPassword(login, passwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", login, passwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockIUseCaseMockRecorder) CheckPassword(login, passwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockIUseCase)(nil).CheckPassword), login, passwd)
}

// CreateUser mocks base method.
func (m *MockIUseCase) CreateUser(login, passwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, passwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUseCaseMockRecorder) CreateUser(login, passwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUseCase)(nil).CreateUser), login, passwd)
}

// DrawBonuses mocks base method.
func (m *MockIUseCase) DrawBonuses(cookie string, sum float64, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrawBonuses", cookie, sum, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DrawBonuses indicates an expected call of DrawBonuses.
func (mr *MockIUseCaseMockRecorder) DrawBonuses(cookie, sum, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawBonuses", reflect.TypeOf((*MockIUseCase)(nil).DrawBonuses), cookie, sum, orderID)
}

// GetBalance mocks base method.
func (m *MockIUseCase) GetBalance(cookie string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", cookie)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIUseCaseMockRecorder) GetBalance(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIUseCase)(nil).GetBalance), cookie)
}

// GetOrders mocks base method.
func (m *MockIUseCase) GetOrders(cookie string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", cookie)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIUseCaseMockRecorder) GetOrders(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIUseCase)(nil).GetOrders), cookie)
}

// GetWithdrawals mocks base method.
func (m *MockIUseCase) GetWithdrawals(cookie string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", cookie)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockIUseCaseMockRecorder) GetWithdrawals(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockIUseCase)(nil).GetWithdrawals), cookie)
}

// updateStatus mocks base method.
func (m *MockIUseCase) updateStatus(username, host, id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateStatus", username, host, id)
}

// updateStatus indicates an expected call of updateStatus.
func (mr *MockIUseCaseMockRecorder) updateStatus(username, host, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateStatus", reflect.TypeOf((*MockIUseCase)(nil).updateStatus), username, host, id)
}
