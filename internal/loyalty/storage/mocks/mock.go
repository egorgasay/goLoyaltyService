// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	schema "gomarket/internal/loyalty/schema"
	storage "gomarket/internal/loyalty/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// CheckID mocks base method.
func (m *MockIStorage) CheckID(username, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckID", username, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckID indicates an expected call of CheckID.
func (mr *MockIStorageMockRecorder) CheckID(username, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckID", reflect.TypeOf((*MockIStorage)(nil).CheckID), username, id)
}

// CheckPassword mocks base method.
func (m *MockIStorage) CheckPassword(login, passwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", login, passwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockIStorageMockRecorder) CheckPassword(login, passwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockIStorage)(nil).CheckPassword), login, passwd)
}

// CreateUser mocks base method.
func (m *MockIStorage) CreateUser(login, passwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, passwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIStorageMockRecorder) CreateUser(login, passwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIStorage)(nil).CreateUser), login, passwd)
}

// GetBalance mocks base method.
func (m *MockIStorage) GetBalance(username string) (schema.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", username)
	ret0, _ := ret[0].(schema.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIStorageMockRecorder) GetBalance(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIStorage)(nil).GetBalance), username)
}

// GetOrders mocks base method.
func (m *MockIStorage) GetOrders(username string) (storage.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", username)
	ret0, _ := ret[0].(storage.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIStorageMockRecorder) GetOrders(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIStorage)(nil).GetOrders), username)
}

// GetWithdrawals mocks base method.
func (m *MockIStorage) GetWithdrawals(username string) ([]schema.Withdrawn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", username)
	ret0, _ := ret[0].([]schema.Withdrawn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockIStorageMockRecorder) GetWithdrawals(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockIStorage)(nil).GetWithdrawals), username)
}

// UpdateOrder mocks base method.
func (m *MockIStorage) UpdateOrder(username, id, status string, accrual float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", username, id, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockIStorageMockRecorder) UpdateOrder(username, id, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockIStorage)(nil).UpdateOrder), username, id, status, accrual)
}

// Withdraw mocks base method.
func (m *MockIStorage) Withdraw(username string, amount float64, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", username, amount, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIStorageMockRecorder) Withdraw(username, amount, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIStorage)(nil).Withdraw), username, amount, orderID)
}
